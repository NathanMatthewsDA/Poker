daml 1.2

module SidePot where

import Cards
-- import DA.Optional
import Scoring
-- import Seat

separate : (a -> Bool) -> [a] -> ([a], [a])
separate f xs = (filter f xs, filter (not . f) xs)

increaseSidePot : Int -> SidePot -> SidePot
increaseSidePot amount sidePot = sidePot with pot = sidePot.pot + amount

data SidePot = SidePot with
                score : Scored
                winners : [Party]
                bet : Int
                pot : Int
                  deriving (Eq, Show)

-- fromSeat : [Card] -> Seat -> Optional SidePot
-- fromSeat community seat =
--   case seat.revealed of
--     HoleCards (card1, card2) ->
--       Some $ SidePot with 
--         score = 
--           handRank (card1 :: card2 :: community)
--         winners = [seat.player]
--         bet = seat.bet
--         pot = seat.bet
--     _ -> None

  -- fmap 
  --   (\(card1, card2) -> 
  --     SidePot with 
  --       score = 
  --         handRank (card1 :: card2 :: community)
  --       winners = [seat.player]
  --       bet = seat.bet
  --       pot = seat.bet)
  --   seat.holeCards

addFolded : [SidePot] -> Int -> [SidePot]
addFolded [] _ = error ""
addFolded [pot] folded = [increaseSidePot folded pot]
addFolded (pot :: pots) folded =
  if folded <= pot.pot then
    (increaseSidePot folded pot) :: pots
  else
    pot :: (addFolded pots folded)

addSidePot : [SidePot] -> SidePot -> [SidePot]
addSidePot [] toAdd = [toAdd]
addSidePot (smallest :: higher) toAdd = 
  case (compare toAdd.bet smallest.bet, compare toAdd.score smallest.score) of
    (EQ, EQ) -> 
      (toAdd with winners = smallest.winners ++ toAdd.winners, pot = smallest.pot + toAdd.pot) :: higher
    (EQ, GT) -> 
      (increaseSidePot smallest.pot toAdd) :: higher
    (EQ, LT) -> 
      (increaseSidePot toAdd.pot smallest) :: higher
    (LT, GT) -> 
      toAdd :: smallest :: higher
    (LT, _) -> 
      (increaseSidePot toAdd.pot smallest) :: higher
    (GT, LT) -> 
      smallest :: (addSidePot higher toAdd)
    (GT, _) -> 
      addSidePot higher (increaseSidePot smallest.pot toAdd)

-- createSidePots : [Card] -> [Seat] -> [SidePot]
-- createSidePots community seats =
--   (\pots -> foldl addFolded pots (map (.bet) folded)) $
--   foldl addSidePot [] $
--   mapOptional (fromSeat community) $
--   unfolded 
--   where
--     (folded, unfolded) = separate (.folded) seats

toSidePot : [Card] -> (Party, Int, (Card, Card)) -> SidePot
toSidePot community (player, bet, (card1, card2)) =
    SidePot with 
        score = 
          handRank (card1 :: card2 :: community)
        winners = [player]
        bet
        pot = bet

createSidePots1 : [Card] -> [Int] -> [(Party, Int, (Card, Card))] -> [SidePot]
createSidePots1 community folded unfolded =
  (\pots -> foldl addFolded pots folded) $
  foldl addSidePot [] $
  map (toSidePot community) $
  unfolded

split : Int -> Int -> [Int]
split num dem = 
  replicate r (d + 1) ++ replicate (dem - r) d
  where
    d = num / dem
    r = num % dem

allocate : SidePot -> [(Party, Int)]
allocate pot = zip pot.winners $ split pot.pot (length pot.winners) 
