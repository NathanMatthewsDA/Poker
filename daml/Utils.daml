daml 1.2

module Utils where

import DA.List ((!!), elemIndex)
import DA.Foldable (maximum)
import DA.Optional (fromSome)

deleteAt : Int -> [a] -> [a]
deleteAt index xs = (take index xs) ++ (drop (index + 1) xs)

updateAt : Int -> (a -> a) -> [a] -> [a]
updateAt i f xs = take i xs ++ (f (xs !! i) :: drop (i + 1) xs)

updateAtA : (Action m) => Int -> (a -> m a) -> [a] -> m [a]
updateAtA i f xs = 
    do
        x <- f $ xs !! i
        return $ setAt i x xs

setAt : Int -> a -> [a] -> [a]
setAt i x xs = take i xs ++ x :: drop (i + 1) xs

allEqual : (Eq a) => [a] -> Bool
allEqual [] = True
allEqual (x :: xs) = all (x ==) xs

rotate : [a] -> [a]
rotate [] = []
rotate (x :: xs) = xs ++ [x]

maxOn : (Ord b) => (a -> b) -> [a] -> [a]
maxOn _ [] = []
maxOn f xs = 
    filter ((m ==) . f) xs 
    where m = maximum $ map f xs

findNextLoop : (a -> Bool) -> [a] -> Optional a
findNextLoop f xs =
    fmap snd $ find (f . fst) $ zip xs (rotate xs)

-- foldlM : (Action m) => (a -> b -> m b) -> [a] -> b -> m b
-- foldlM f [] s = do return s
-- foldlM f (x :: xs) s =
--     do
--         b <- f x s
--         foldlM f xs b

-- findPrevLoop : (a -> Bool) -> [a] -> Optional a
-- findPrevLoop f xs =
--     fmap snd $ find (f . fst) $ zip xs (rotate xs)

separate : (a -> Bool) -> [a] -> ([a], [a])
separate f xs = (filter f xs, filter (not . f) xs)

indexOf : (Eq a) => a -> [a] -> Int
indexOf x = fromSome . elemIndex x

replace : (Eq a) => a -> a -> [a] -> [a]
replace old new = map (\x -> if x == old then new else x)

after : (a -> Bool) -> [a] -> [a]
after f xs =
    after ++ before ++ [e]
    where
        (before, (e :: after)) = break f xs
