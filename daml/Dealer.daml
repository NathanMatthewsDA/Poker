daml 1.2

module Dealer where

import Random
import Cards
import Lobby
import RequestJoinGame
import Round
import Hand

template Dealer
    with
        dealer : Party
        house : Party
        id : Int
        undealt : [Card]
    where
        signatory dealer

        -- key dealer : Party

        -- maintainer key

        controller dealer can

            DealCard : ContractId Dealer
                do
                    (roundId, round) <- fetchByKey @Round (id, house, dealer)

                    case length (round.community) of
                        0 -> do
                                let card1 :: card2 :: card3 :: rest = undealt

                                roundId <- exercise roundId DealCommunity with card = card1
                                roundId <- exercise roundId DealCommunity with card = card2
                                roundId <- exercise roundId DealCommunity with card = card3
                                
                                create this with undealt = rest

                        3 -> do
                                let card :: rest = undealt

                                exercise roundId DealCommunity with card
                                
                                create this with undealt = rest
                                
                        4 -> do
                                let card :: rest = undealt

                                exercise roundId DealCommunity with card
                                
                                create this with undealt = rest

                        _ -> error "Game already has five cards dealt"

            StartGame : ContractId Dealer
                do                    
                    (lobbyId, lobby) <- fetchByKey @Lobby dealer
                                        
                    create this with id = id + 1

                    seeds <- mapA (\player -> exerciseByKey @Seed (player, dealer) UseSeed) lobby.players

                    let shuffled = shuffle (sum seeds) deck

                    let n = length lobby.players

                    let pairs = zip (take n shuffled) (drop n shuffled)

                    mapA (\(holder, (card1, card2)) ->
                             create Hand with dealer, holder, card1, card2, id) $ zip lobby.players pairs

                    exercise lobbyId StartBetting with id

                    create this with undealt = drop (n + n) shuffled
