daml 1.2

module Navigator where

import Chips
import RequestJoinGame
import Table

createChips : Party -> Party -> [Party] -> Int -> Scenario (ContractId Chips)
createChips house owner observers quantity =
    do
        transfer <- submit house do
                        chips <- create Chips with house, owner = house, quantity, observers
                        exercise chips Transfer_Chips with newOwner = owner
        
        submit owner do
            exercise transfer Accept_TransferChips

joinTable : Party -> Party -> Party -> ContractId Chips -> Int -> Int -> Scenario (ContractId Table)
joinTable house dealer player stack seed id = 
    do
        request <- submit player do
                    create RequestJoinGame with dealer, player, seed, stack
        
        submit dealer do
           exercise request AcceptRequestJoinTable with house, id

bootstrap = scenario do
    house <- getParty "House"
    dealer <- getParty "Dealer"

    players@[alice, bob, eve, mallory, trent] <- 
        mapA getParty ["Alice", "Bob", "Eve", "Mallory", "Trent"]

    let id = 100

    table <- submit house do
            createTable house dealer id 10

    let tableKey = (id, house, dealer)

    seed <- submit dealer do
                create Seed with dealer, house, id, total = 0

    aliceChips <- Navigator.createChips house alice [dealer] 300
    bobChips <- Navigator.createChips house bob [dealer] 400
    eveChips <- Navigator.createChips house eve [dealer] 400
    malloryChips <- Navigator.createChips house mallory [dealer] 400
    trentChips <- Navigator.createChips house trent [dealer] 400

    table <- joinTable house dealer alice aliceChips 2432 id
    table <- joinTable house dealer bob bobChips 9828 id
    table <- joinTable house dealer eve eveChips 4534 id
    table <- joinTable house dealer mallory malloryChips 12 id
    table <- joinTable house dealer trent trentChips 5353 id

    submit dealer do
        exerciseByKey @Seed tableKey StartGame

    submit eve do
        exerciseByKey @Table tableKey Call
    
    submit mallory do
         exerciseByKey @Table tableKey Call

    submit trent do
         exerciseByKey @Table tableKey Call

    submit alice do
         exerciseByKey @Table tableKey Call

    submit dealer do
        exerciseByKey @UndealtCommunity tableKey DealCommunityCard
        exerciseByKey @UndealtCommunity tableKey DealCommunityCard
        exerciseByKey @UndealtCommunity tableKey DealCommunityCard

    submit alice do
        exerciseByKey @Table tableKey Check

    submit bob do
        exerciseByKey @Table tableKey Check

    submit eve do
        exerciseByKey @Table tableKey Check

    submit mallory do
        exerciseByKey @Table tableKey Check

    -- submit alice do
    --     exerciseByKey @Table roundKey Check

    -- d <- submit dealer do
    --     exercise d DealCard

    -- submit trent do
    --     exerciseByKey @Table roundKey Raise with amount = 30

    -- submit mallory do
    --     exerciseByKey @Table roundKey Fold with player = mallory

    -- submit eve do
    --     exerciseByKey @Table roundKey Call

    -- submit bob do
    --     exerciseByKey @Table roundKey Call

    -- submit alice do
    --     exerciseByKey @Table roundKey Call

    -- d <- submit dealer do
    --     exercise d DealCard

    -- submit trent do
    --     exerciseByKey @Table roundKey Check

    -- submit eve do
    --     exerciseByKey @Table roundKey Raise with amount = 40

    -- submit bob do
    --     exerciseByKey @Table roundKey AllIn

    -- submit alice do
    --     exerciseByKey @Table roundKey Raise with amount = 20

    -- submit trent do
    --     exerciseByKey @Table roundKey AllIn

    -- submit eve do
    --     exerciseByKey @Table roundKey Call

    -- submit bob do
    --     exerciseByKey @Table roundKey Reveal with player = bob

    -- submit alice do
    --     exerciseByKey @Table roundKey Reveal with player = alice

    -- submit eve do
    --     exerciseByKey @Table roundKey Reveal with player = eve

    -- submit trent do
    --     exerciseByKey @Table roundKey Reveal with player = trent

    return ()