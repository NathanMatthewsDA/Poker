daml 1.2

module Navigator where

import Chips
import Table
import StartTable
import Seat

createChips : Party -> Party -> [Party] -> Int -> Scenario (ContractId Chips)
createChips house owner observers quantity =
    do
        transfer <- submit house do
                        chips <- create Chips with house, owners = [house], quantity, observers
                        exercise chips Transfer_Chips with newOwner = owner
        
        submit owner do
            exercise transfer AcceptTransfer

createSeed : Party -> Party -> Int -> Scenario (ContractId PlayerSeed)
createSeed dealer player seed = 
    do
        submit player do
            create PlayerSeed with player, dealer, seed

inviteAndJoin : Party -> Party -> ContractId Chips -> ContractId PlayerSeed -> ContractId Table -> Scenario (ContractId Table)
inviteAndJoin inviter player stack seed table =
    do        
        invite <- submit inviter do
            exercise table InvitePlayer with inviter, player

        submit player do
            exercise invite AcceptTableInvitation with stack, seed

bootstrap = scenario do
    house <- getParty "House"
    dealer <- getParty "Dealer"

    players@[alice, bob, eve, mallory, trent] <- 
        mapA getParty ["Alice", "Bob", "Eve", "Mallory", "Trent"]

    let id = 100

    let tableKey = (id, dealer)

    d <- submit dealer do
            create Dealer with dealer, id

    aliceChips <- Navigator.createChips house alice [] 300
    bobChips <- Navigator.createChips house bob [] 400
    eveChips <- Navigator.createChips house eve [] 400
    malloryChips <- Navigator.createChips house mallory [] 400
    trentChips <- Navigator.createChips house trent [] 400

    aliceSeed <- createSeed dealer alice 2132
    bobSeed <- createSeed dealer bob 35253
    eveSeed <- createSeed dealer eve 21412
    mallorySeed <- createSeed dealer mallory 923
    trentSeed <- createSeed dealer trent 983342

    st <- submit alice do
            create StartTable with
                seed = aliceSeed
                dealer
                player = alice
                smallBlind = 10
                stack = aliceChips


    table <- submit dealer do
                exercise st CreateTable with id

    table <- inviteAndJoin alice bob bobChips bobSeed table         
    table <- inviteAndJoin bob eve eveChips eveSeed table
    table <- inviteAndJoin bob mallory malloryChips mallorySeed table
    table <- inviteAndJoin mallory trent trentChips trentSeed table

    table <- submit bob do
                exercise table PlayerReady with player = bob

    table <- submit eve do
                exercise table PlayerReady with player = eve

    table <- submit alice do
                exercise table PlayerReady with player = alice

    table <- submit mallory do
                exercise table PlayerReady with player = mallory

    table <- submit trent do
                exercise table PlayerReady with player = trent

    table <- submit dealer do
                exercise d DealAndStartHand

    submit eve do
        exerciseByKey @Table tableKey Call
    
    submit mallory do
         exerciseByKey @Table tableKey Call

    submit trent do
         exerciseByKey @Table tableKey Call

    submit alice do
         exerciseByKey @Table tableKey Call

    table <- submit dealer do
        exerciseByKey @Community tableKey PlayCommunity






    -- submit trent do
    --      exerciseByKey @Table tableKey Call

    -- submit alice do
    --      exerciseByKey @Table tableKey Call

    -- submit dealer do
    --     exerciseByKey @UndealtCommunity tableKey DealCommunityCard
    --     exerciseByKey @UndealtCommunity tableKey DealCommunityCard
    --     exerciseByKey @UndealtCommunity tableKey DealCommunityCard

    -- submit alice do
    --     exerciseByKey @Table tableKey Check

    -- submit bob do
    --     exerciseByKey @Table tableKey Check

    -- submit eve do
    --     exerciseByKey @Table tableKey Check

    -- submit mallory do
    --     exerciseByKey @Table tableKey Check









    -- submit alice do
    --     exerciseByKey @Table roundKey Check

    -- d <- submit dealer do
    --     exercise d DealCard

    -- submit trent do
    --     exerciseByKey @Table roundKey Raise with amount = 30

    -- submit mallory do
    --     exerciseByKey @Table roundKey Fold with player = mallory

    -- submit eve do
    --     exerciseByKey @Table roundKey Call

    -- submit bob do
    --     exerciseByKey @Table roundKey Call

    -- submit alice do
    --     exerciseByKey @Table roundKey Call

    -- d <- submit dealer do
    --     exercise d DealCard

    -- submit trent do
    --     exerciseByKey @Table roundKey Check

    -- submit eve do
    --     exerciseByKey @Table roundKey Raise with amount = 40

    -- submit bob do
    --     exerciseByKey @Table roundKey AllIn

    -- submit alice do
    --     exerciseByKey @Table roundKey Raise with amount = 20

    -- submit trent do
    --     exerciseByKey @Table roundKey AllIn

    -- submit eve do
    --     exerciseByKey @Table roundKey Call

    -- submit bob do
    --     exerciseByKey @Table roundKey Reveal with player = bob

    -- submit alice do
    --     exerciseByKey @Table roundKey Reveal with player = alice

    -- submit eve do
    --     exerciseByKey @Table roundKey Reveal with player = eve

    -- submit trent do
    --     exerciseByKey @Table roundKey Reveal with player = trent

    return ()