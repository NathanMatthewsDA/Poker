daml 1.2

module Navigator where

import Chips
import Round
-- import Dealer
import Seat
import Utils

createChips : Party -> Party -> Int -> Scenario (ContractId Chips)
createChips house owner quantity =
    do
        transfer <- submit house do
                        chips <- create Chips with house, owner = house, quantity, observers = []
                        exercise chips Transfer_Chips with newOwner = owner
        
        submit owner do
            exercise transfer AcceptTransfer

createSeed : Party -> Party -> Int -> Scenario (ContractId HiddenSeed)
createSeed dealer player seed = 
    do
        submit player do
            create HiddenSeed with player, dealer, seed

-- inviteAndJoin : Party -> Party -> Party -> Party -> Int -> Int -> ContractId Table -> Scenario (ContractId Table)
-- inviteAndJoin house dealer inviter player stack seed table  =
--     do        
--         transfer <- submit house do
--                         chips <- create Chips with house, owners = [house], quantity = stack, observers = []
--                         exercise chips Transfer_Chips with newOwner = player
        
--         stack <- submit player do
--                     exercise transfer AcceptTransfer

--         table <- submit inviter do
--             exercise table InvitePlayer with inviter, player

--         seed <- submit player do
--                   create PlayerSeed with dealer, player, seed

--         table <- submit inviter do
--                     exercise table InvitePlayer with inviter, player

--         submit player do
--             exercise table JoinTable with player, seed, stack

-- invite : Party -> Party -> ContractId PendingHand -> Scenario (ContractId PendingHand)
-- invite inviter player pending = 
--      submit inviter do
--           exercise pending InvitePlayer with inviter, player

-- accept : Party -> ContractId Chips -> ContractId PendingHand -> Scenario (ContractId PendingHand)
-- accept player stack pending = 
--      submit player do exercise pending JoinTable with player, stack

-- ready : Party -> Int -> ContractId PendingHand -> Scenario (ContractId PendingHand)
-- ready player seed pending = 
--    submit player do playerReady player seed pending

forceLeft : Either a b -> a
forceLeft (Left a) = a
forceLeft _ = error "Either wasn't a left"

forceRight : Either a b -> b
forceRight (Right a) = a
forceRight _ = error "Either wasn't a right"

bootstrap = scenario do

    house <- getParty "House"
    dealer <- getParty "Dealer"

    players@[alice, bob, eve, mallory, trent] <- 
        mapA getParty ["Alice", "Bob", "Eve", "Mallory", "Trent"]

    let chips = [250, 250, 80, 600, 50]

--  error $ show $ sum chips 
    [aliceChips, bobChips, eveChips, malloryChips, trentChips] <-
        sequence $ zipWith (createChips house) players chips

    pending <- submit alice do
                    createTable alice dealer 10 40

    pending <- submit alice do
                    exercise pending BuyIn with player = alice, chips = aliceChips

    pending <- submit alice do
                    exercise pending AddObserver with inviter = alice, watcher = bob

    pending <- submit alice do
                    exercise pending AddObserver with inviter = alice, watcher = eve

    pending <- submit eve do
                    exercise pending BuyIn with player = eve, chips = eveChips

    pending <- submit eve do
                    exercise pending AddObserver with inviter = eve, watcher = trent
    
    pending <- submit eve do
                    exercise pending AddObserver with inviter = eve, watcher = mallory

    pending <- submit mallory do
                    exercise pending BuyIn with player = mallory, chips = malloryChips

    pending <- fmap forceLeft $ submit eve do
                    seed <- create HiddenSeed with dealer, player = eve, seed = 132
                    exercise pending Ready with player = eve, seed

    pending <- fmap forceLeft $ submit mallory do
                    seed <- create HiddenSeed with dealer, player = mallory, seed = 4234
                    exercise pending Ready with player = mallory, seed

    pending <- fmap forceRight $ submit alice do
                    seed <- create HiddenSeed with dealer, player = alice, seed = 242
                    exercise pending Ready with player = alice, seed

    play <- submit dealer do
                dealAndStartHand dealer pending

    play <- fmap fromAwaitingPlayer $ submit alice do
                callOrCheck play

    play <- fmap fromAwaitingDealer $ submit mallory do
                callOrCheck play

    play <- submit dealer do 
                exercise play FlipCommunityCards

    play <- fmap fromAwaitingPlayer $ submit mallory do
                callOrCheck play

    play <- fmap fromAwaitingPlayer $ submit eve do
                raise 0 play

    play <- fmap fromAwaitingPlayer $ submit alice do
                callOrCheck play

    play <- fmap fromAwaitingDealer $ submit mallory do
                callOrCheck play

    play <- submit dealer do
                exercise play FlipCommunityCards

    play <- fmap fromAwaitingPlayer $ submit mallory do
                raise 30 play

    play <- fmap fromAwaitingPlayer $ submit alice do
                raise 30 play

    play <- fmap fromAwaitingDealer $ submit mallory do
                callOrCheck play

    play <- submit dealer do
                exercise play FlipCommunityCards

    play <- fmap fromAwaitingPlayer $ submit mallory do
                callOrCheck play

    play <- fmap fromAwaitingPlayer $ submit alice do
                callOrCheck play

    play <- fmap fromAwaitingPlayer $ submit mallory do
                exercise play Reveal

    play <- fmap fromAwaitingPlayer $ submit eve do
                exercise play Reveal

    play <- fmap fromFinished $ submit alice do
                exercise play Reveal

--     pending <- submit alice do
--                     createPending dealer alice 20 aliceChips

--     pending <- invite alice bob pending

--     pending <- accept bob bobChips pending

--     pending <- invite alice eve pending

--     pending <- accept eve eveChips pending

--     pending <- ready alice 2141 pending

--     pending <- invite eve mallory pending
                    
--     pending <- invite eve trent pending

--     pending <- accept trent trentChips pending

--     pending <- accept mallory malloryChips pending
 
--     pending <- ready bob 3213 pending

--     pending <- ready trent 23 pending

--     pending <- ready eve 53235 pending

--     pending <- ready mallory 3212 pending

--     round <- submit dealer do startGame pending

--     round <- submit eve do 
--                fmap forceLeft $    
--                     exercise round BettingRound_Raise with amount = 10
               
--     round <- submit bob do 
--                fmap forceLeft $ 
--                     exercise round BettingRound_Raise with amount = 10

--     round <- submit alice do 
--                fmap forceLeft $ 
--                     exercise round BettingRound_Call

--     round <- submit mallory do 
--                fmap forceLeft $ 
--                     exercise round BettingRound_Call

--     round <- submit trent do 
--                fmap forceLeft $ 
--                     exercise round BettingRound_AllIn

--     round <- submit eve do 
--                fmap (forceLeft . forceRight) $ 
--                     exercise round BettingRound_Call

--     round <- submit dealer do
--                fmap forceLeft $ 
--                     exercise round TurnCommunity

--     round <- submit mallory do 
--                fmap forceLeft $ 
--                     exercise round CheckRound_Check

--     round <- submit eve do 
--                fmap forceLeft $ 
--                     exercise round CheckRound_Check

--     round <- submit bob do 
--                fmap forceLeft $ 
--                     exercise round CheckRound_Check

--     round <- submit alice do 
--                fmap (forceLeft . forceRight) $ 
--                     exercise round CheckRound_Check

--     round <- submit dealer do
--                fmap forceLeft $ 
--                     exercise round TurnCommunity

--     round <- submit mallory do 
--                     exercise round CheckRound_Raise with amount = 40

--     round <- submit eve do 
--                fmap forceLeft $ 
--                     exercise round BettingRound_Call

--     round <- submit bob do 
--                fmap (forceLeft . forceLeft) $ 
--                     exercise round BettingRound_Fold with player = bob

--     round <- submit alice do 
--                fmap (forceLeft . forceRight) $ 
--                     exercise round BettingRound_Call

--     round <- submit dealer do
--                fmap forceLeft $ 
--                     exercise round TurnCommunity

--     round <- submit mallory do 
--                     exercise round CheckRound_Raise with amount = 100

--     round <- submit eve do 
--                fmap forceLeft $ 
--                     exercise round BettingRound_AllIn

--     round <- submit alice do 
--                fmap forceLeft $ 
--                     exercise round BettingRound_AllIn

--     round <- submit mallory do 
--                fmap (forceRight . forceRight) $ 
--                     exercise round BettingRound_Call
 
--     round <- submit trent do 
--                fmap forceLeft $ 
--                     exercise round ShowdownRound_Reveal with player = trent

--     round <- submit eve do 
--                fmap forceLeft $ 
--                     exercise round ShowdownRound_Reveal with player = eve

--     round <- submit alice do 
--                fmap forceLeft $ 
--                     exercise round ShowdownRound_Reveal with player = alice

--     round <- submit mallory do 
--                fmap forceRight $ 
--                     exercise round ShowdownRound_Reveal with player = mallory

--     pending <- submit eve do playerReady eve 3242 pending





    return ()