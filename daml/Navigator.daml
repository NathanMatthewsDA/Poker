daml 1.2

module Navigator where

import Chips
import Table
import Dealer
import Seat

createChips : Party -> Party -> [Party] -> Int -> Scenario (ContractId Chips)
createChips house owner observers quantity =
    do
        transfer <- submit house do
                        chips <- create Chips with house, owners = [house], quantity, observers
                        exercise chips Transfer_Chips with newOwner = owner
        
        submit owner do
            exercise transfer AcceptTransfer

createSeed : Party -> Party -> Int -> Scenario (ContractId PlayerSeed)
createSeed dealer player seed = 
    do
        submit player do
            create PlayerSeed with player, dealer, seed

inviteAndJoin : Party -> Party -> Party -> Party -> Int -> Int -> ContractId Table -> Scenario (ContractId Table)
inviteAndJoin house dealer inviter player stack seed table  =
    do        
        transfer <- submit house do
                        chips <- create Chips with house, owners = [house], quantity = stack, observers = []
                        exercise chips Transfer_Chips with newOwner = player
        
        stack <- submit player do
                    exercise transfer AcceptTransfer

        table <- submit inviter do
            exercise table InvitePlayer with inviter, player

        seed <- submit player do
                  create PlayerSeed with dealer, player, seed

        table <- submit inviter do
                    exercise table InvitePlayer with inviter, player

        submit player do
            exercise table JoinTable with player, seed, stack

bootstrap = scenario do
    house <- getParty "House"
    dealer <- getParty "Dealer"

    players@[alice, bob, eve, mallory, trent] <- 
        mapA getParty ["Alice", "Bob", "Eve", "Mallory", "Trent"]

    d <- submit dealer do
            create Dealer with dealer

    aliceChips <- Navigator.createChips house alice [] 300
--     bobChips <- Navigator.createChips house bob [] 400
--     eveChips <- Navigator.createChips house eve [] 400
--     malloryChips <- Navigator.createChips house mallory [] 400
--     trentChips <- Navigator.createChips house trent [] 400

--     aliceSeed <- createSeed dealer alice 2132
--     bobSeed <- createSeed dealer bob 35253
--     eveSeed <- createSeed dealer eve 21412
--     mallorySeed <- createSeed dealer mallory 923
--     trentSeed <- createSeed dealer trent 983342

    table <- submit alice do
                 createTable dealer aliceChips 34234 10
               --  seed = aliceSeed
               --  dealer
               --  player = alice
               --  smallBlind = 10
               --  stack = aliceChips

--     table <- submit dealer do exercise st CreateTable

    table <- inviteAndJoin house dealer alice bob 300 43523 table
    table <- inviteAndJoin house dealer bob eve 450 43523 table
    table <- inviteAndJoin house dealer bob mallory 200 2423 table
    table <- inviteAndJoin house dealer mallory trent 500 3421 table

    table <- submit bob do
                exercise table PlayerReady with player = bob

    table <- submit eve do
                exercise table PlayerReady with player = eve

    table <- submit alice do
                exercise table PlayerReady with player = alice

    table <- submit mallory do
                exercise table PlayerReady with player = mallory

    table <- submit trent do
                exercise table PlayerReady with player = trent

    table <- submit dealer do
                exercise d DealAndStartHand with table

    table <- submit eve do
                exercise table Call
    
    table <- submit mallory do
         exercise table Call

    table <- submit trent do
         exercise table Call

    table <- submit alice do
         exercise table Call

    table <- submit dealer do
        exercise d PlayCommunity with table

    table <- submit alice do
         exercise table Check

    table <- submit bob do
         exercise table Raise with amount = 40

    table <- submit eve do
         exercise table Fold with player = eve

    table <- submit mallory do
         exercise table Call

    table <- submit trent do
         exercise table Raise with amount = 10

    table <- submit alice do
         exercise table  Call

    table <- submit bob do
         exercise table Fold with player = bob

    table <- submit mallory do
         exercise table Call

    table <- submit dealer do
        exercise d PlayCommunity with table

    table <- submit alice do
         exercise table Check

    table <- submit mallory do
         exercise table Check

    table <- submit trent do
         exercise table Check

    table <- submit dealer do
        exercise d PlayCommunity with table

    table <- submit alice do
         exercise table Check

    table <- submit mallory do
         exercise table Raise with amount = 10

    table <- submit trent do
         exercise table Fold with player = trent

    table <- submit alice do
         exercise table AllIn

    table <- submit mallory do
         exercise table Reveal with player = mallory

    table <- submit alice do
         exercise table Reveal with player = alice

    return ()