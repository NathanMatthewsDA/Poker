daml 1.2

module Navigator where

import Chips
import Poker
import Round

createChips : Party -> Party -> Int -> Scenario (ContractId Chips)
createChips house owner quantity =
    do
        transfer <- submit house do
                        chips <- create Chips with house, owner = house, quantity, observers = []
                        exercise chips Transfer_Chips with newOwner = owner
        
        submit owner do
            exercise transfer AcceptTransfer

toPendingHand : Next -> ContractId PendingHand
toPendingHand (AwaitingPendingHand awaiting) = awaiting
toPendingHand other = error $ show other <> " was not expected AwaitingPendingHand"

toDealHands : Next -> ContractId DealHands
toDealHands (AwaitingDealHands awaiting) = awaiting
toDealHands other = error $ show other <> " was not expected AwaitingDealHands"

toBetOrFold : Next -> ContractId BetOrFold
toBetOrFold (AwaitingBetOrFold awaiting) = awaiting
toBetOrFold other = error $ show other <> " was not expected AwaitingBetOrFold"

toCheckOrRaise : Next -> ContractId CheckOrRaise
toCheckOrRaise (AwaitingCheckOrRaise awaiting) = awaiting
toCheckOrRaise other = error $ show other <> " was not expected AwaitingCheckOrRaise"

toTurnCommunity : Next -> ContractId TurnCommunity
toTurnCommunity (AwaitingTurnCommunity awaiting) = awaiting
toTurnCommunity other = error $ show other <> " was not expected AwaitingTurnCommunity"

toShowdown : Next -> ContractId Showdown
toShowdown (AwaitingShowdown awaiting) = awaiting
toShowdown other = error $ show other <> " was not expected AwaitingShowdown"

bootstrap = scenario do

    house <- getParty "House"
    dealer <- getParty "Dealer"

    players@[alice, bob, eve, mallory, trent] <- 
        mapA getParty ["Alice", "Bob", "Eve", "Mallory", "Trent"]

    let chips = [250, 250, 80, 600, 50]

--  error $ show $ sum chips 
    [aliceChips, bobChips, eveChips, malloryChips, trentChips] <-
        sequence $ zipWith (createChips house) players chips

    -- createTable : Party -> Limits -> ContractId Chips -> Update (ContractId PendingHand)

    let limits = Limits with
                    smallBlind = 10
                    bigBlind = 20
                    tableStake = 40
                    maxBuyIn = 1000

    pending <- submit alice do
                    createTable dealer limits aliceChips

    pending <- submit alice do
                    exercise pending InvitePlayer with inviter = alice, invitee = bob

    pending <- submit bob do
                    exercise pending JoinTable with player = bob, stack = bobChips

    pending <- submit bob do
                    exercise pending InvitePlayer with inviter = bob, invitee = eve

    pending <- submit eve do
                    exercise pending JoinTable with player = eve, stack = eveChips

    pending <- submit alice do
                    exercise pending InvitePlayer with inviter = alice, invitee = mallory

    pending <- submit mallory do
                    exercise pending JoinTable with player = mallory, stack = malloryChips

    pending <- submit bob do
                seed <- create PlayerSeed with player = bob, dealer, seed = 123
                fmap toPendingHand $ exercise pending Ready with player = bob, seed 

    pending <- submit eve do
                seed <- create PlayerSeed with player = eve, dealer, seed = 3232
                fmap toPendingHand $ exercise pending Ready with player = eve, seed 

    pending <- submit alice do
                seed <- create PlayerSeed with player = alice, dealer, seed = 1243242
                fmap toPendingHand $ exercise pending Ready with player = alice, seed 

    dealHands <- submit mallory do
                seed <- create PlayerSeed with player = mallory, dealer, seed = 873
                fmap toDealHands $ exercise pending Ready with player = mallory, seed 

    betOrFold <- submit dealer do
                    shuffleAndDeal dealHands       

    betOrFold <- submit eve do
                    fmap toBetOrFold $ exercise betOrFold Bet with amount = 20
    
    betOrFold <- submit bob do
                    fmap toBetOrFold $ exercise betOrFold Bet with amount = 20

    checkOrRaise <- submit alice do
                    fmap toCheckOrRaise $ exercise betOrFold Bet with amount = 10

    turnCommunity <- submit mallory do
                        fmap toTurnCommunity $ exercise checkOrRaise Check

    checkOrRaise <- submit dealer do
                        fmap toCheckOrRaise $ exercise turnCommunity Turn

    checkOrRaise <- submit alice do
                        fmap toCheckOrRaise $ exercise checkOrRaise Check

    checkOrRaise <- submit mallory do
                        fmap toCheckOrRaise $ exercise checkOrRaise Check

    checkOrRaise <- submit eve do
                        fmap toCheckOrRaise $ exercise checkOrRaise Check

    turnCommunity <- submit bob do
                        fmap toTurnCommunity $ exercise checkOrRaise Check

    checkOrRaise <- submit dealer do
                        fmap toCheckOrRaise $ exercise turnCommunity Turn

    betOrFold <- submit alice do
                        exercise checkOrRaise Raise with amount = 30

    betOrFold <- submit mallory do
                        fmap toBetOrFold $ exercise betOrFold Bet with amount = 30

    betOrFold <- submit eve do
                            fmap toBetOrFold $ exercise betOrFold Fold with leaveTable = False
                
    turnCommunity <- submit bob do
                        fmap toTurnCommunity $ exercise betOrFold Bet with amount = 30

    checkOrRaise <- submit dealer do
                        fmap toCheckOrRaise $ exercise turnCommunity Turn

    betOrFold <- submit alice do
                        exercise checkOrRaise Raise with amount = 200
                  
    betOrFold <- submit mallory do
                        fmap toBetOrFold $ exercise betOrFold Bet with amount = 200

    showdown <- submit bob do
                        fmap Navigator.toShowdown $ exercise betOrFold Bet with amount = 200

    showdown <- submit alice do
                    fmap Navigator.toShowdown $ exercise showdown Reveal with holeCard1 = True, holeCard2 = True

    showdown <- submit mallory do
                    fmap Navigator.toShowdown $ exercise showdown Reveal with holeCard1 = False, holeCard2 = True

    pending <- submit bob do
                    fmap toPendingHand $ exercise showdown Reveal with holeCard1 = True, holeCard2 = True

    return ()