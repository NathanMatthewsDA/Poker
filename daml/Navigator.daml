daml 1.2

module Navigator where

import Lobby
import Chips
import Dealer
import RequestJoinGame
import Table

template Join
    with
        player : Party
        dealer : Party
        stack : ContractId Chips
    where
        signatory player
        
        controller player can
          RequestJoin : ContractId RequestJoinGame
            with seed : Int
            do
                stack <- exercise stack AddObserver_Chips with obs = dealer

                create RequestJoinGame with
                    player
                    dealer
                    seed
                    stack

setupPlayer : Party -> Party -> Int -> Party -> Scenario (ContractId Join)
setupPlayer house dealer quantity player  =
    scenario do        
        transfer <- submit house do
                    chips <- create Chips with 
                                owner = house
                                house
                                quantity 
                                observers = [dealer]
                        
                    exercise chips Transfer_Chips with
                        newOwner = player

        submit player do
            stack <- exercise transfer Accept_TransferChips 

            create Join with
                player
                dealer
                stack

addPlayerToLobby : Party -> ContractId Join -> Int -> Scenario (ContractId Lobby)
addPlayerToLobby player join seed =
    scenario do
        dealer <- submit player do
            fmap (.dealer) $ fetch join

        req <- submit player do
            exercise join RequestJoin with seed

        submit dealer do
            exercise req AcceptRequestJoinGame       

bootstrap = scenario do
    house <- getParty "House"
    dealer <- getParty "Dealer"
                
    dealerInvitation <- submit house do
                            create DealerInvitation with house, dealer

    d <- submit dealer do
                create Dealer with dealer, id = 0, house, undealt = []

    lobby <- submit dealer do
                exercise dealerInvitation CreateLobby
                    with smallBlind = 5, bigBlind = 10

    let playerNames = ["Alice", "Bob", "Eve", "Mallory", "Trent"]

    players@[alice, bob, eve, mallory, trent] <- mapA getParty playerNames

    joins <- mapA (setupPlayer house dealer 200) players

    let seeds = [1000, 2000, 3000, 4000, 5000]

    sequence $ zipWith3 addPlayerToLobby players joins seeds 

    let roundKey = (0, house, dealer)

    d <- submit dealer do
        exercise d StartGame

    submit eve do
        exerciseByKey @Table roundKey CallOrCheck
    
    -- submit bob do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit alice do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit trent do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- d <- submit dealer do
    --     exercise d DealCard

    -- submit trent do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit mallory do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit eve do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit bob do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit alice do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- d <- submit dealer do
    --     exercise d DealCard

    -- submit trent do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit mallory do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit eve do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit bob do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit alice do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- d <- submit dealer do
    --     exercise d DealCard

    -- submit trent do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit mallory do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit eve do 
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit bob do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit alice do
    --     exerciseByKey @Round roundKey CallOrCheck

    -- submit trent do
    --     exerciseByKey @Round roundKey Reveal

    -- submit trent do
    --     exerciseByKey @Round roundKey Reveal

    return ()