daml 1.2

module Test where

import Lobby
import Chips
import DA.List ((!!))
import Round
import DA.Bifunctor

getNextPlayer : Next -> ContractId Round
getNextPlayer (NextPlayer round) = round
getNextPlayer _ = error "Next wasn't a NextPlayer"


test = scenario do
    house <- getParty "House"
    dealer <- getParty "Dealer"
    players <- mapA getParty ["player0", "player1", "player2", "player3"]
    let [player0, player1, player2, player3] = players
    -- let stacks = [200, 300, 200, 400]
    
    dealerInvitation <- submit house do
                            create DealerInvitation with house, dealer
                            
    lobby <- submit dealer do
                exercise dealerInvitation CreateLobby
                    with smallBlind = 5, bigBlind = 10

    stacks <- mapA (\(p, q) -> createChips house p [] q) $ zip players [200, 300, 200, 400] 

    req <- submit player0 do
              requestJoinGame dealer (stacks !! 0) 10

    submit dealer do
        exercise req AcceptRequestJoinGame              

    req <- submit player1 do
              requestJoinGame dealer (stacks !! 1) 10

    submit dealer do
        exercise req AcceptRequestJoinGame              

    req <- submit player2 do
              requestJoinGame dealer (stacks !! 2) 10

    submit dealer do
        exercise req AcceptRequestJoinGame              

    req <- submit player3 do
              requestJoinGame dealer (stacks !! 3) 10

    submit dealer do
        exercise req AcceptRequestJoinGame              

    round <- submit dealer do
                exerciseByKey @Lobby dealer StartGame

    round <- submit player1 do
                exercise round Raise with amount = 30

    round <- fmap getNextPlayer $ submit player0 do
                exercise round CallOrCheck

    (chips, round) <- fmap (second getNextPlayer) $ submit player3 do
                            exercise round Fold

    round <- submit player2 do
                exercise round Raise with amount = 80

    (chips, round) <- submit player1 do
                            exercise round Fold


    -- p0c <- createChips house player1 1000
    -- p1c <- createChips house player1 1000
    -- p2c <- createChips house player2 1000
    -- p3c <- createChips house player3 1000

    return ()
