daml 1.2

module Chips where

import DA.List

template TransferChips
    with
        chips : Chips
        newOwner : Party
    where
        signatory chips.owners

        controller newOwner can
            AcceptTransfer : ContractId Chips
                do create chips with owners = [newOwner]
            
            RejectTransfer : ContractId Chips 
                do create chips

        controller chips.owners can
            CancelTransfer : ContractId Chips
                do create chips 
            
template Chips 
    with 
        owners : [Party]
        house : Party
        quantity : Int
        observers : [Party]
    where
        signatory house, owners
        observer observers

        ensure quantity >= 0
            
        choice AddChips : ContractId Chips
            with
                chips : ContractId Chips
                chipsOwners : [Party]
            controller chipsOwners
            do
                q <- fmap (.quantity) $ fetch chips
                exercise chips Archive
                create this with quantity = quantity + q
                        
        choice Merge : ContractId Chips
            with
                chips : ContractId Chips
                chipsOwners : [Party]
            controller chipsOwners, owners
            do
                q <- fmap (.quantity) $ fetch chips
                exercise chips Archive
                create this with 
                    quantity = quantity + q
                    owners = dedup $ owners ++ chipsOwners

        choice Leave : ContractId Chips
            with
                leaver : Party
            controller leaver
            do
                assertMsg ("Party: " <> show leaver <> " must be an owner to leave") $ elem leaver owners
                assertMsg ("Party: " <> show leaver <> " tried to relinqush ownership on chips for which it was the only owner") $ length owners > 1

                create this with 
                    owners = delete leaver owners, observers = delete leaver observers

        choice AddObserver : ContractId Chips
            with
                obs : Party
                adder : Party
            controller adder
            do
                assert $ elem adder observers || elem adder owners
                create this with observers = obs :: observers

        choice AddOwner : ContractId Chips
            with 
                owner : Party
            controller owner, owners
            do
                create this with owners = dedup $ owner :: owners

        controller owners can

            TakeOwnership : ContractId Chips
                with
                    owner : Party
                do
                    create this with owners = [owner], observers = []

            Split : (ContractId Chips, ContractId Chips)
                with
                    amount : Int
                do
                    assertMsg ("Cannot split, amount: " <> show amount <> " is not greater than zero") $ 
                        amount > 0
                    assertMsg "Cannot split, amount is not less than quantity" $ 
                        amount < quantity

                    l <- create this with quantity = amount
                    r <- create this with quantity = (quantity - amount)

                    return (l, r)

            Transfer_Chips : ContractId TransferChips
                with
                    newOwner : Party
                do
                    create TransferChips with chips = this, newOwner
            